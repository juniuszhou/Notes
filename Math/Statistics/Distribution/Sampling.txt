Sampling.txt

# 
sample mean
sample variance. note the sample variance is denominator n-1. 



#### 三大抽样分布
# 卡方分布 chi-square distribution   X^2
如果一个变量是服从标准正太分布，那么它的平方服从卡方分布. 这个时候n=1

若n个相互独立的随机变量ξ₁、ξ₂、……、ξn ，均服从标准正态分布（也称独立同分布于标准正态分布），
则这n个服从标准正态分布的随机变量的平方和构成一新的随机变量.s
E(x)=n
D(x)=2n

样本方差S服从卡方分布；

卡方分布是特殊的伽玛分布. so chi-square 's density is gamma density.

# t 分布
应用在对呈正态分布的总体的均值进行估计。
t

t分布与正态分布的不同：
1、正态分布是与自由度无关的一条曲线； t分布是依自由度而变的一组曲线。
2、t分布较正态分布顶部略低而尾部稍高。

t分布曲线形态与n（确切地说与自由度v）大小有关。与标准正态分布曲线相比，自由度v越小，t分布曲线愈平坦，曲线中间愈低，曲线双侧尾部翘得愈高；自由度v愈大，t分布曲线愈接近正态分布曲线，当自由度v=∞时，t分布曲线为标准正态分布曲线。

假设n个样本来自均值为μ，方差为σ的正太分布总体，其中<y>为样本均值，S^2为样本方差（注意跟总体方差的区别）。根据卡方分布的定义：χ^2=(n-1)S^2/σ^2，可知，卡方随机变量依赖于样本方差和总体（真实的）方差。然而对于t分布，可以证明：T=(<y>-μ)/(S/sqrt(n))是一个自由度为n-1的t分布。对比这两者不难发现，
t分布不依赖于总体方差，因而在统计推断中，当总体方差未知的时候，采用t分布得到的推断结果往往更合理。


# f 分布
定义:设X1服从自由度为m的χ2分布,X2服从自由度为n的χ2分布，且X1、X2相互独立，则称变量F=(X1/m)/(X2/n)所服从的分布为F分布，其中第一自由度为m,第二自由度为n.


各个分布的应用如下：
方差已知情况下求均值是Z检验。
方差未知求均值是t检验（样本标准差s代替总体标准差R，由样本平均数推断总体平均数）
均值方差都未知求方差是X^2检验
两个正态分布样本的均值方差都未知情况下求两个总体的方差比值是F检验。



Z分布和t分布一般用于总体平均数的估计和显著性检验以及平均数差异的显著性检验
Z就是正态分布

# 
sample mean
sample variance.

population 总体

correlation coefficient 相关系数


负载均衡。tornado之类的框架只支持单核，所以多进程部署需要反向负载均衡。gunicorn本身就是多进程其实不需要静态文件支持，经过配置之后，nginx可以直接处理静态文件请求而不用经过Python服务器，Python服务器也可以返回特殊的http头将请求rewrite到静态文件。我说的是经过配置之后，你配置了吗？抗并发压力。虽然不能提升qps，但是多一层前端，的确可以吸收一些瞬时的并发请求，让nginx先保持住连接，然后后端慢慢消化，但说实话这种情况下服务体验已经很糟糕了。但的确比服务挂掉强一些。

nginx可以缓冲请求和响应。如果让Gunicorn直接提供服务，浏览器发起一个请求，鉴于浏览器和网络情况都是未知的，http请求的发起过程可能比较慢，而Gunicorn只能等待请求发起完成后，才去真正处理请求，处理完成后，等客户端完全接收请求后，才继续下一个。nginx缓存客户端发起的请求，直到收完整个请求，转发给Gunicorn，等Gunicorn处理完成后，拿到响应，再发给客户端，这个流程是nginx擅长处理，而Gunicorn不擅长处理的。

1.负载均衡，nginx占用80端口，g可以占用多个非80端口;
2.拦截静态请求;
3.伪静态化并缓存，减少动态请求数量;
4.依赖于nginx强大的功能和性能，可以做访问控制，限速，限连接数等等;



## sample mean and sample variance is indepent.

