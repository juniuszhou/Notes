Isolation.txt

提供资源隔离机制是YARN NodeManager的责任，针对不同的资源，YARN采用了不同的资源隔离机制，而本文涉及到的YARN-3则全面介绍了YARN的资源隔离机制，总结起来，当前YARN针对CPU和内存两种资源提供了隔离机制，其中，CPU采用了CGroups轻量级资源隔离机制，而内存则采用了线程监控的方案。
由于YARN的目标是构建一个通用的资源管理平台，不仅仅限于Java编写的MapReduce这类应用，更多的是非java程序，因此，MRv1基于JVM的资源隔离方案是不可行的。
对于CGroups而言，它可以限制应用程序的内存使用上限，当内存超过某个阈值时，它将直接将其杀死。对于一些应用程序而言，有些情况下会出现内存暴增而又骤降的现象，因此采用硬性限制的策略是缺乏灵活性的，基于这种考虑，YARN仍采用了MRv1中的基于线程监控的方案，该方案启动一个线程监控当前正在运行的任务的进程树，如果发现内存暴增而又骤降，则认为是正常现象，不会将任务杀死，因此，该方案更加友好。
由于CPU资源的多少不会影响任务的生死（只影响任务执行的快慢），因此，YARN采用了CGroups对CPU资源进行隔离，需要注意的是，CGroups采用的是CPU资源下限控制法，该方法是一种公平共享的方法，举个例子，如果一个节点上有8个核（pcore:vcore=1:1），那么如果只运行一个任务(pcore=1)，则它最多使用800%的CPU，如果运行2个任务(pcore=1)，则每个任务最多可使用400%的CPU，依次类推
